White and blacklisting HTTP proxies
~~~~~~~~~~~~~~~~~

Figure out deferreds

chat to Colin and Jeremy about where this should be and how they would like it implemented

List of allowed ips

disallowed

include domain names?

set up and test with Travis

//TASKS//

1. Make a basic proxy DONE
2. Make a logging proxy DONE
3. Set up local proxy DONE
4. Make a proxy that logs and prints the http request
5. Make a proxy that blocks Facebook
6. Make a proxy that allows Facebook and blocks Twitter


//SOME CODE//

BASIC PROXY:
~~~~~~~~~~~~~~~~~~~
Usage:
    $ python proxy.py

Then configure your web browser to use localhost:8080 as a proxy, and visit a
URL (This is not a SOCKS proxy). When browsing in this configuration, this
example will proxy connections from the browser to the server indicated by URLs
which are visited.

See also logging-proxy.py for a proxy with additional features.
"""
-----------
from twisted.web import proxy, http
from twisted.internet import reactor

class ProxyFactory(http.HTTPFactory):
    def buildProtocol(self, addr):
        return proxy.Proxy()

reactor.listenTCP(8080, ProxyFactory())
reactor.run()
~~~~~~~~~~~~~~~~~~~~

LOGGING PROXY:
~~~~~~~~~~~~~~~~~~~~

HTTP is supported.  HTTPS is not supported.
--------

from twisted.internet import reactor
from twisted.web import proxy, http

class LoggingProxyRequest(proxy.ProxyRequest):
    def process(self):
        """
        It's normal to see a blank HTTPS page. As the proxy only works
        with the HTTP protocol.
        """
        print "Request from %s for %s" % (
            self.getClientIP(), self.getAllHeaders()['host'])
        try:
            proxy.ProxyRequest.process(self)
        except KeyError:
            print "HTTPS is not supported at the moment!"

class LoggingProxy(proxy.Proxy):
    requestFactory = LoggingProxyRequest

class LoggingProxyFactory(http.HTTPFactory):
    def buildProtocol(self, addr):
        return LoggingProxy()

reactor.listenTCP(8080, LoggingProxyFactory())
reactor.run()
~~~~~~~~~~~~~~~~~~~~

INTERCEPTING PACKETS: this isn't it
~~~~~~~~~~~~~~~~~~~~
from twisted.web import proxy, http
from twisted.internet import reactor
from twisted.python import log
import sys

log.startLogging(sys.stdout)

class MyProxy(proxy.Proxy):
    def dataReceived(self, data):

      # Modify the data here
      print data //look at HTTP request here

      # perform the default functionality on modified data 
      return proxy.Proxy.dataReceived(self, data)

class ProxyFactory(http.HTTPFactory):
  protocol=MyProxy

factory = ProxyFactory()
reactor.listenTCP(8080, factory)
reactor.run()
~~~~~~~~~~~~~~~~~~~~~~~

//QUESTIONS//
. how to determine internal ips. that technology?
. I'm pretty sure I'm using virtualenv wrong...

Site objects serve as the glue between a port to listen for HTTP requests on, and a root Resource object.
